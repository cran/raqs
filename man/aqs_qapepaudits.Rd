% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/aqs_qapepaudits.R
\name{aqs_qapepaudits}
\alias{aqs_qapepaudits}
\alias{qapepaudits_bysite}
\alias{qapepaudits_bycounty}
\alias{qapepaudits_bystate}
\alias{qapepaudits_bypqao}
\alias{qapepaudits_byma}
\title{AQS API QA PEP Audits service}
\usage{
aqs_qapepaudits(
  aqs_filter = c("bySite", "byCounty", "byState", "byPQAO", "byMA"),
  aqs_variables = NULL,
  header = FALSE,
  ...
)

qapepaudits_bysite(
  param,
  bdate,
  edate,
  state,
  county,
  site,
  email = get_aqs_email(),
  key = get_aqs_key(),
  header = FALSE,
  ...
)

qapepaudits_bycounty(
  param,
  bdate,
  edate,
  state,
  county,
  email = get_aqs_email(),
  key = get_aqs_key(),
  header = FALSE,
  ...
)

qapepaudits_bystate(
  param,
  bdate,
  edate,
  state,
  email = get_aqs_email(),
  key = get_aqs_key(),
  header = FALSE,
  ...
)

qapepaudits_bypqao(
  param,
  bdate,
  edate,
  pqao,
  email = get_aqs_email(),
  key = get_aqs_key(),
  header = FALSE,
  ...
)

qapepaudits_byma(
  param,
  bdate,
  edate,
  agency,
  email = get_aqs_email(),
  key = get_aqs_key(),
  header = FALSE,
  ...
)
}
\arguments{
\item{aqs_filter}{A string specifying one of the service filters. NOT
case-sensitive.}

\item{aqs_variables}{A named list of variables to fetch data (e.g.,
\code{state}). Only necessary variables are passed to a specific endpoint
(service/filter) to make a valid request.}

\item{header}{A logical specifying whether the function returns additional
information from the API header. Default is \code{FALSE} to return data only.}

\item{...}{Reserved for future use.}

\item{param}{A string or vector of strings specifying the 5-digit AQS
parameter code for data selection. An integer will be coerced to a string.
A maximum of 5 parameter codes may be listed in a single request. A list
of the parameter codes can be obtained via \link{list_parametersbyclass}.}

\item{bdate}{A string specifying the begin date of data selection in
YYYYMMDD format. Only data on or after this date will be returned.}

\item{edate}{A string specifying the end date of data selection in YYYYMMDD
format. Only data on or before this date will be returned. If the end date
is not in the same year as the begin date, the function will automatically
split the date range into multiple chunks by year and send requests
sequentially.}

\item{state}{A string specifying the 2-digit state FIPS code. An integer
will be coerced to a string with a leading zero if necessary (e.g., 1 ->
"01"). A list of the state codes can be obtained via \link{list_states}.}

\item{county}{A string specifying the 3-digit county FIPS code. An integer
will be coerced to a string with leading zeros if necessary (e.g., 89 ->
"089"). A list of the county codes within each state can be obtained via
\link{list_countiesbystate}.}

\item{site}{A string specifying the 4-digit AQS site number within the
county. An integer will be coerced to a string with leading zeros if
necessary (e.g., 14 -> "0014"). A list of the site codes within each
county can be obtained via \link{list_sitesbycounty}.}

\item{email}{A string specifying the email address of the requester. If you
set your email and key with \link{set_aqs_user}, you don't have to specify
this.}

\item{key}{A string specifying the key matching the email address for the
requester. If you set your email and key with \link{set_aqs_user}, you don't
have to specify this.}

\item{pqao}{A string specifying the AQS Primary Quality Assurance
Organization (PQAO) code. A list of the PQAO codes can be obtained via
\link{list_pqaos}.}

\item{agency}{A string specifying the AQS Monitoring Agency (MA) code. A
list of the MA codes can be obtained via \link{list_mas}. Here, we named this
input as \code{agency} instead of "ma" because \code{agency} is actually used in the
API endpoint URL.}
}
\value{
A data.frame containing parsed data or a named list containing
header and data.
}
\description{
A collection of functions to fetch data related to PM2.5 monitoring system
audits.
}
\details{
\link{aqs_qapepaudits} sends a request to the AQS API based on a user-provided
filter using the following underlying functions:
\itemize{
\item \link{qapepaudits_bysite} returns PEP Audit data for \code{param} at \code{site} in
\code{county}, within \code{state}, between \code{bdate} and \code{edate}.
\item \link{qapepaudits_bycounty} returns PEP Audit data for \code{param} in \code{county}
within \code{state} between \code{bdate} and \code{edate}.
\item \link{qapepaudits_bystate} returns PEP Audit data for \code{param} in \code{state}
between \code{bdate} and \code{edate}.
\item \link{qapepaudits_bypqao} returns PEP Audit data for \code{param} in \code{pqao} between
\code{bdate} and \code{edate}.
\item \link{qapepaudits_byma} returns PEP Audit data for \code{param} in \code{agency}
(monitoring agency) between \code{bdate} and \code{edate}.
}
}
\examples{
\dontrun{

## Set your API Key first using set_aqs_user to run the following codes

## Example from the AQS website
## PEP Audit data for FRM PM2.5 in Alabama for 2017
aqs_variables <- list(
  param = "88101", bdate = "20170101", edate = "20171231",
  state = "01"
)
aqs_qapepaudits(
  aqs_filter = "byState", aqs_variables = aqs_variables
)

## Equivalent to above; used integers instead of strings
qapepaudits_bystate(
  param = 88101, bdate = "20170101", edate = "20171231",
  state = 1
)
}

}
